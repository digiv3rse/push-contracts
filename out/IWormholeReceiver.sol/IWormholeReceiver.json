{"abi":[{"type":"function","name":"receiveWormholeMessages","inputs":[{"name":"payload","type":"bytes","internalType":"bytes"},{"name":"additionalMessages","type":"bytes[]","internalType":"bytes[]"},{"name":"sourceAddress","type":"bytes32","internalType":"bytes32"},{"name":"sourceChain","type":"uint16","internalType":"uint16"},{"name":"deliveryHash","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":"529dca32"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalMessages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"params\":{\"additionalMessages\":\"- Additional messages which were requested to be included in this delivery.      Note: There are no contract-level guarantees that the messages in this array are what was requested      so **you should verify any sensitive information given here!**      For example, if a 'VaaKey' was specified on the source chain, then MAKE SURE the corresponding message here      has valid signatures (by calling `parseAndVerifyVM(message)` on the Wormhole core contract)      This field can be used to perform and relay TokenBridge or CCTP transfers, and there are example      usages of this at         https://github.com/wormhole-foundation/hello-token         https://github.com/wormhole-foundation/hello-cctp\",\"deliveryHash\":\"- the VAA hash of the deliveryVAA.\",\"payload\":\"- an arbitrary message which was included in the delivery by the     requester. This message's signature will already have been verified (as long as msg.sender is the Wormhole Relayer contract)\",\"sourceAddress\":\"- the (wormhole format) address on the sending chain which requested     this delivery.\",\"sourceChain\":\"- the wormhole chain ID where this delivery was requested.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"notice\":\"When a `send` is performed with this contract as the target, this function will be     invoked by the WormholeRelayer contract NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it. We also recommend that this function checks that `sourceChain` and `sourceAddress` are indeed who       you expect to have requested the calling of `send` on the source chain The invocation of this function corresponding to the `send` request will have msg.value equal   to the receiverValue specified in the send request. If the invocation of this function reverts or exceeds the gas limit   specified by the send requester, this delivery will result in a `ReceiverFailure`.\"}},\"notice\":\"Interface for a contract which can receive Wormhole messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/wormhole/IWormholeReceiver.sol\":\"IWormholeReceiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@ethereum-waffle/=node_modules/@ethereum-waffle/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\",\":wormhole-solidity-sdk /= lib/wormhole-solidity-sdk/src/\",\":wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/\"]},\"sources\":{\"contracts/interfaces/wormhole/IWormholeReceiver.sol\":{\"keccak256\":\"0x1e864447dfaf9e03b5bcaa42a51762a89208dacd58680bcab28416a6f6714671\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://69ccf137e018fc9bcd40506ead35f0d798182a8a60cab0cea2863e22ed5b38bf\",\"dweb:/ipfs/QmVrKW389upTu5nac1kWFLoS8NqSA4r4YKrL9chhcCjYea\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"bytes[]","name":"additionalMessages","type":"bytes[]"},{"internalType":"bytes32","name":"sourceAddress","type":"bytes32"},{"internalType":"uint16","name":"sourceChain","type":"uint16"},{"internalType":"bytes32","name":"deliveryHash","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"receiveWormholeMessages"}],"devdoc":{"kind":"dev","methods":{"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":{"params":{"additionalMessages":"- Additional messages which were requested to be included in this delivery.      Note: There are no contract-level guarantees that the messages in this array are what was requested      so **you should verify any sensitive information given here!**      For example, if a 'VaaKey' was specified on the source chain, then MAKE SURE the corresponding message here      has valid signatures (by calling `parseAndVerifyVM(message)` on the Wormhole core contract)      This field can be used to perform and relay TokenBridge or CCTP transfers, and there are example      usages of this at         https://github.com/wormhole-foundation/hello-token         https://github.com/wormhole-foundation/hello-cctp","deliveryHash":"- the VAA hash of the deliveryVAA.","payload":"- an arbitrary message which was included in the delivery by the     requester. This message's signature will already have been verified (as long as msg.sender is the Wormhole Relayer contract)","sourceAddress":"- the (wormhole format) address on the sending chain which requested     this delivery.","sourceChain":"- the wormhole chain ID where this delivery was requested."}}},"version":1},"userdoc":{"kind":"user","methods":{"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":{"notice":"When a `send` is performed with this contract as the target, this function will be     invoked by the WormholeRelayer contract NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it. We also recommend that this function checks that `sourceChain` and `sourceAddress` are indeed who       you expect to have requested the calling of `send` on the source chain The invocation of this function corresponding to the `send` request will have msg.value equal   to the receiverValue specified in the send request. If the invocation of this function reverts or exceeds the gas limit   specified by the send requester, this delivery will result in a `ReceiverFailure`."}},"version":1}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@ethereum-waffle/=node_modules/@ethereum-waffle/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","solidity-bytes-utils/=node_modules/solidity-bytes-utils/","wormhole-solidity-sdk /= lib/wormhole-solidity-sdk/src/","wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/"],"optimizer":{"enabled":true,"runs":99999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/wormhole/IWormholeReceiver.sol":"IWormholeReceiver"},"evmVersion":"shanghai","libraries":{}},"sources":{"contracts/interfaces/wormhole/IWormholeReceiver.sol":{"keccak256":"0x1e864447dfaf9e03b5bcaa42a51762a89208dacd58680bcab28416a6f6714671","urls":["bzz-raw://69ccf137e018fc9bcd40506ead35f0d798182a8a60cab0cea2863e22ed5b38bf","dweb:/ipfs/QmVrKW389upTu5nac1kWFLoS8NqSA4r4YKrL9chhcCjYea"],"license":"Apache 2"}},"version":1},"id":20}
{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e9bea15aefeb9ab9edf5dfbcf7c4850c222f56b1abe39a2db19f174e8beb1ea64736f6c63430008140033","sourceMap":"1368:6959:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1368:6959:18;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e9bea15aefeb9ab9edf5dfbcf7c4850c222f56b1abe39a2db19f174e8beb1ea64736f6c63430008140033","sourceMap":"1368:6959:18:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes ` (`bytes Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@ethereum-waffle/=node_modules/@ethereum-waffle/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"]},\"sources\":{\"contracts/libraries/EnumerableSet.sol\":{\"keccak256\":\"0x3fda62a70e976eb4310f51d2f7bc1787821e16b4e1bdd4598773482942d4e0a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1cf89620dde3ea904a25f5458d92171d703a13cbbfa05ae123d892571bdcd74\",\"dweb:/ipfs/QmePHF3WVtkaRmpjMMqoPcjA6C8u694fif1uiLKD71r5TS\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@ethereum-waffle/=node_modules/@ethereum-waffle/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","solidity-bytes-utils/=node_modules/solidity-bytes-utils/"],"optimizer":{"enabled":true,"runs":99999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/libraries/EnumerableSet.sol":"EnumerableSet"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/libraries/EnumerableSet.sol":{"keccak256":"0x3fda62a70e976eb4310f51d2f7bc1787821e16b4e1bdd4598773482942d4e0a3","urls":["bzz-raw://b1cf89620dde3ea904a25f5458d92171d703a13cbbfa05ae123d892571bdcd74","dweb:/ipfs/QmePHF3WVtkaRmpjMMqoPcjA6C8u694fif1uiLKD71r5TS"],"license":"MIT"}},"version":1},"id":18}
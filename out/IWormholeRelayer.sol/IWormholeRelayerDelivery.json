{"abi":[{"type":"function","name":"deliver","inputs":[{"name":"encodedVMs","type":"bytes[]","internalType":"bytes[]"},{"name":"encodedDeliveryVAA","type":"bytes","internalType":"bytes"},{"name":"relayerRefundAddress","type":"address","internalType":"address payable"},{"name":"deliveryOverrides","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"deliveryAttempted","inputs":[{"name":"deliveryHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"attempted","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"deliveryFailureBlock","inputs":[{"name":"deliveryHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"deliverySuccessBlock","inputs":[{"name":"deliveryHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getRegisteredWormholeRelayerContract","inputs":[{"name":"chainId","type":"uint16","internalType":"uint16"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"event","name":"Delivery","inputs":[{"name":"recipientContract","type":"address","indexed":true,"internalType":"address"},{"name":"sourceChain","type":"uint16","indexed":true,"internalType":"uint16"},{"name":"sequence","type":"uint64","indexed":true,"internalType":"uint64"},{"name":"deliveryVaaHash","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"status","type":"uint8","indexed":false,"internalType":"enum IWormholeRelayerDelivery.DeliveryStatus"},{"name":"gasUsed","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"refundStatus","type":"uint8","indexed":false,"internalType":"enum IWormholeRelayerDelivery.RefundStatus"},{"name":"additionalStatusInfo","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"overridesInfo","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"SendEvent","inputs":[{"name":"sequence","type":"uint64","indexed":true,"internalType":"uint64"},{"name":"deliveryQuote","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"paymentForExtraReceiverValue","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"deliver(bytes[],bytes,address,bytes)":"a60eb4c8","deliveryAttempted(bytes32)":"d0625a19","deliveryFailureBlock(bytes32)":"5a3b92e8","deliverySuccessBlock(bytes32)":"40984f08","getRegisteredWormholeRelayerContract(uint16)":"3e8267e7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deliveryVaaHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IWormholeRelayerDelivery.DeliveryStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IWormholeRelayerDelivery.RefundStatus\",\"name\":\"refundStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"additionalStatusInfo\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"overridesInfo\",\"type\":\"bytes\"}],\"name\":\"Delivery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deliveryQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"}],\"name\":\"SendEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedVMs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"encodedDeliveryVAA\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"relayerRefundAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deliveryOverrides\",\"type\":\"bytes\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryAttempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"attempted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryFailureBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliverySuccessBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"getRegisteredWormholeRelayerContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)\":{\"custom:member\":\"recipientContract - The target contract addresssourceChain - The chain which this delivery was requested from (in wormhole     ChainID format)sequence - The wormhole sequence number of the delivery VAA on the source chain     corresponding to this delivery requestdeliveryVaaHash - The hash of the delivery VAA corresponding to this delivery     requestgasUsed - The amount of gas that was used to call your target contractstatus:   - RECEIVER_FAILURE, if the target contract reverts   - SUCCESS, if the target contract doesn't revertadditionalStatusInfo:   - If status is SUCCESS, then this is empty.   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the       return data (i.e. potentially truncated revert reason information).refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,     where a cross chain refund is necessary, or if the default code path is used where no refund is requested (NO_REFUND_REQUESTED)overridesInfo:   - If not an override: empty bytes array   - Otherwise: An encoded `DeliveryOverride`\"}},\"kind\":\"dev\",\"methods\":{\"deliver(bytes[],bytes,address,bytes)\":{\"params\":{\"deliveryOverrides\":\"- Optional overrides field which must be either an empty bytes array or     an encoded DeliveryOverride struct\",\"encodedDeliveryVAA\":\"- Signed wormhole message from the source chain's WormholeRelayer     contract with payload being the encoded delivery instruction container\",\"encodedVMs\":\"- An array of signed wormhole messages (all from the same source chain     transaction)\",\"relayerRefundAddress\":\"- The address to which any refunds to the delivery provider     should be sent\"}}},\"title\":\"IWormholeRelayerDelivery\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliver(bytes[],bytes,address,bytes)\":{\"notice\":\"The delivery provider calls `deliver` to relay messages as described by one delivery instruction The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain as well as the signed wormhole message with the delivery instructions (the delivery VAA) The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met: - the delivery VAA has a valid signature - the delivery VAA's emitter is one of these WormholeRelayer contracts - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund) - the instruction's target chain is this chain - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\"},\"deliveryAttempted(bytes32)\":{\"notice\":\"Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted\"},\"deliveryFailureBlock(bytes32)\":{\"notice\":\"block number of the latest attempt to execute a delivery that failed\"},\"deliverySuccessBlock(bytes32)\":{\"notice\":\"block number at which a delivery was successfully executed\"}},\"notice\":\"The interface to execute deliveries. Only relevant for Delivery Providers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/wormhole/IWormholeRelayer.sol\":\"IWormholeRelayerDelivery\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@ethereum-waffle/=node_modules/@ethereum-waffle/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\",\":wormhole-solidity-sdk /= lib/wormhole-solidity-sdk/src/\",\":wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/\"]},\"sources\":{\"contracts/interfaces/wormhole/IWormholeRelayer.sol\":{\"keccak256\":\"0xe9175cbc36c7fa9d0d61d6be77aec0fb05e5ca7e1e39716f938ca45729db4ca7\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://67095b557aebc621dfaf9b901d3ad468cd3387b0fa76438658fe8c27929710f7\",\"dweb:/ipfs/QmWdr2XVPaYTEiR5dbcMtuuh7PpvdxYjPTMFNEXLKqFNd8\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"recipientContract","type":"address","indexed":true},{"internalType":"uint16","name":"sourceChain","type":"uint16","indexed":true},{"internalType":"uint64","name":"sequence","type":"uint64","indexed":true},{"internalType":"bytes32","name":"deliveryVaaHash","type":"bytes32","indexed":false},{"internalType":"enum IWormholeRelayerDelivery.DeliveryStatus","name":"status","type":"uint8","indexed":false},{"internalType":"uint256","name":"gasUsed","type":"uint256","indexed":false},{"internalType":"enum IWormholeRelayerDelivery.RefundStatus","name":"refundStatus","type":"uint8","indexed":false},{"internalType":"bytes","name":"additionalStatusInfo","type":"bytes","indexed":false},{"internalType":"bytes","name":"overridesInfo","type":"bytes","indexed":false}],"type":"event","name":"Delivery","anonymous":false},{"inputs":[{"internalType":"uint64","name":"sequence","type":"uint64","indexed":true},{"internalType":"uint256","name":"deliveryQuote","type":"uint256","indexed":false},{"internalType":"uint256","name":"paymentForExtraReceiverValue","type":"uint256","indexed":false}],"type":"event","name":"SendEvent","anonymous":false},{"inputs":[{"internalType":"bytes[]","name":"encodedVMs","type":"bytes[]"},{"internalType":"bytes","name":"encodedDeliveryVAA","type":"bytes"},{"internalType":"address payable","name":"relayerRefundAddress","type":"address"},{"internalType":"bytes","name":"deliveryOverrides","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deliver"},{"inputs":[{"internalType":"bytes32","name":"deliveryHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"deliveryAttempted","outputs":[{"internalType":"bool","name":"attempted","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"deliveryHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"deliveryFailureBlock","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"deliveryHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"deliverySuccessBlock","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}]},{"inputs":[{"internalType":"uint16","name":"chainId","type":"uint16"}],"stateMutability":"view","type":"function","name":"getRegisteredWormholeRelayerContract","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]}],"devdoc":{"kind":"dev","methods":{"deliver(bytes[],bytes,address,bytes)":{"params":{"deliveryOverrides":"- Optional overrides field which must be either an empty bytes array or     an encoded DeliveryOverride struct","encodedDeliveryVAA":"- Signed wormhole message from the source chain's WormholeRelayer     contract with payload being the encoded delivery instruction container","encodedVMs":"- An array of signed wormhole messages (all from the same source chain     transaction)","relayerRefundAddress":"- The address to which any refunds to the delivery provider     should be sent"}}},"version":1},"userdoc":{"kind":"user","methods":{"deliver(bytes[],bytes,address,bytes)":{"notice":"The delivery provider calls `deliver` to relay messages as described by one delivery instruction The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain as well as the signed wormhole message with the delivery instructions (the delivery VAA) The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met: - the delivery VAA has a valid signature - the delivery VAA's emitter is one of these WormholeRelayer contracts - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund) - the instruction's target chain is this chain - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)"},"deliveryAttempted(bytes32)":{"notice":"Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted"},"deliveryFailureBlock(bytes32)":{"notice":"block number of the latest attempt to execute a delivery that failed"},"deliverySuccessBlock(bytes32)":{"notice":"block number at which a delivery was successfully executed"}},"version":1}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@ethereum-waffle/=node_modules/@ethereum-waffle/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","solidity-bytes-utils/=node_modules/solidity-bytes-utils/","wormhole-solidity-sdk /= lib/wormhole-solidity-sdk/src/","wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/"],"optimizer":{"enabled":true,"runs":99999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/wormhole/IWormholeRelayer.sol":"IWormholeRelayerDelivery"},"evmVersion":"shanghai","libraries":{}},"sources":{"contracts/interfaces/wormhole/IWormholeRelayer.sol":{"keccak256":"0xe9175cbc36c7fa9d0d61d6be77aec0fb05e5ca7e1e39716f938ca45729db4ca7","urls":["bzz-raw://67095b557aebc621dfaf9b901d3ad468cd3387b0fa76438658fe8c27929710f7","dweb:/ipfs/QmWdr2XVPaYTEiR5dbcMtuuh7PpvdxYjPTMFNEXLKqFNd8"],"license":"Apache 2"}},"version":1},"id":21}